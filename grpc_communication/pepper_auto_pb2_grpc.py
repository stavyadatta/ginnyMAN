# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import pepper_auto_pb2 as pepper__auto__pb2


class PepperAutoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetImg = channel.unary_unary(
                '/PepperAuto/GetImg',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=pepper__auto__pb2.ImageChunk.FromString,
                )
        self.ExecuteAction = channel.unary_unary(
                '/PepperAuto/ExecuteAction',
                request_serializer=pepper__auto__pb2.ExecuteParam.SerializeToString,
                response_deserializer=pepper__auto__pb2.ConfirmationChunk.FromString,
                )
        self.RobotSay = channel.unary_unary(
                '/PepperAuto/RobotSay',
                request_serializer=pepper__auto__pb2.SentenceParam.SerializeToString,
                response_deserializer=pepper__auto__pb2.ConfirmationChunk.FromString,
                )


class PepperAutoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetImg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RobotSay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PepperAutoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetImg': grpc.unary_unary_rpc_method_handler(
                    servicer.GetImg,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=pepper__auto__pb2.ImageChunk.SerializeToString,
            ),
            'ExecuteAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteAction,
                    request_deserializer=pepper__auto__pb2.ExecuteParam.FromString,
                    response_serializer=pepper__auto__pb2.ConfirmationChunk.SerializeToString,
            ),
            'RobotSay': grpc.unary_unary_rpc_method_handler(
                    servicer.RobotSay,
                    request_deserializer=pepper__auto__pb2.SentenceParam.FromString,
                    response_serializer=pepper__auto__pb2.ConfirmationChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PepperAuto', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PepperAuto(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetImg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PepperAuto/GetImg',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            pepper__auto__pb2.ImageChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PepperAuto/ExecuteAction',
            pepper__auto__pb2.ExecuteParam.SerializeToString,
            pepper__auto__pb2.ConfirmationChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RobotSay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PepperAuto/RobotSay',
            pepper__auto__pb2.SentenceParam.SerializeToString,
            pepper__auto__pb2.ConfirmationChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
