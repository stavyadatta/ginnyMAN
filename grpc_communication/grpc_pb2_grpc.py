# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import grpc_pb2 as grpc__pb2


class MediaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendAudioImg = channel.unary_unary(
                '/MediaService/SendAudioImg',
                request_serializer=grpc__pb2.AudioImgRequest.SerializeToString,
                response_deserializer=grpc__pb2.AudioImgResponse.FromString,
                )
        self.LLmResponse = channel.unary_stream(
                '/MediaService/LLmResponse',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=grpc__pb2.TextChunk.FromString,
                )
        self.StreamImages = channel.stream_unary(
                '/MediaService/StreamImages',
                request_serializer=grpc__pb2.ImageStreamRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetBbox = channel.unary_unary(
                '/MediaService/GetBbox',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=grpc__pb2.FaceBoundingBox.FromString,
                )
        self.SecondaryChannel = channel.unary_unary(
                '/MediaService/SecondaryChannel',
                request_serializer=grpc__pb2.SecondaryData.SerializeToString,
                response_deserializer=grpc__pb2.TextChunk.FromString,
                )


class MediaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendAudioImg(self, request, context):
        """RPC method to send audio and image data together
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LLmResponse(self, request, context):
        """New RPC method to send audio data and stream text response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamImages(self, request_iterator, context):
        """RPC method to handle image streams
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBbox(self, request, context):
        """RPC method to get face detections bboxes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SecondaryChannel(self, request, context):
        """Secondary channel request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MediaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendAudioImg': grpc.unary_unary_rpc_method_handler(
                    servicer.SendAudioImg,
                    request_deserializer=grpc__pb2.AudioImgRequest.FromString,
                    response_serializer=grpc__pb2.AudioImgResponse.SerializeToString,
            ),
            'LLmResponse': grpc.unary_stream_rpc_method_handler(
                    servicer.LLmResponse,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=grpc__pb2.TextChunk.SerializeToString,
            ),
            'StreamImages': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamImages,
                    request_deserializer=grpc__pb2.ImageStreamRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetBbox': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBbox,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=grpc__pb2.FaceBoundingBox.SerializeToString,
            ),
            'SecondaryChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.SecondaryChannel,
                    request_deserializer=grpc__pb2.SecondaryData.FromString,
                    response_serializer=grpc__pb2.TextChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MediaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MediaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendAudioImg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MediaService/SendAudioImg',
            grpc__pb2.AudioImgRequest.SerializeToString,
            grpc__pb2.AudioImgResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LLmResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MediaService/LLmResponse',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            grpc__pb2.TextChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamImages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/MediaService/StreamImages',
            grpc__pb2.ImageStreamRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MediaService/GetBbox',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            grpc__pb2.FaceBoundingBox.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SecondaryChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MediaService/SecondaryChannel',
            grpc__pb2.SecondaryData.SerializeToString,
            grpc__pb2.TextChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
