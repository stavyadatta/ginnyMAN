# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_pb2 as grpc__pb2


class MediaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendAudio = channel.unary_unary(
                '/MediaService/SendAudio',
                request_serializer=grpc__pb2.AudioRequest.SerializeToString,
                response_deserializer=grpc__pb2.AudioResponse.FromString,
                )
        self.SendImage = channel.unary_unary(
                '/MediaService/SendImage',
                request_serializer=grpc__pb2.ImageRequest.SerializeToString,
                response_deserializer=grpc__pb2.ImageResponse.FromString,
                )
        self.LLmResponse = channel.unary_stream(
                '/MediaService/LLmResponse',
                request_serializer=grpc__pb2.SessionRequest.SerializeToString,
                response_deserializer=grpc__pb2.TextChunk.FromString,
                )


class MediaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendAudio(self, request, context):
        """RPC method to send audio data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendImage(self, request, context):
        """RPC method to send image data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LLmResponse(self, request, context):
        """New RPC method to send audio data and stream text response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MediaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendAudio': grpc.unary_unary_rpc_method_handler(
                    servicer.SendAudio,
                    request_deserializer=grpc__pb2.AudioRequest.FromString,
                    response_serializer=grpc__pb2.AudioResponse.SerializeToString,
            ),
            'SendImage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendImage,
                    request_deserializer=grpc__pb2.ImageRequest.FromString,
                    response_serializer=grpc__pb2.ImageResponse.SerializeToString,
            ),
            'LLmResponse': grpc.unary_stream_rpc_method_handler(
                    servicer.LLmResponse,
                    request_deserializer=grpc__pb2.SessionRequest.FromString,
                    response_serializer=grpc__pb2.TextChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MediaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MediaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendAudio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MediaService/SendAudio',
            grpc__pb2.AudioRequest.SerializeToString,
            grpc__pb2.AudioResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MediaService/SendImage',
            grpc__pb2.ImageRequest.SerializeToString,
            grpc__pb2.ImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LLmResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MediaService/LLmResponse',
            grpc__pb2.SessionRequest.SerializeToString,
            grpc__pb2.TextChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
